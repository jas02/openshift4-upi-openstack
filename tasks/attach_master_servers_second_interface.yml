---
- name: Retrieve info about second network
  os_networks_info:
    cloud: "{{ openstack_cloud_name }}"
    name: "{{ openshift_masters_second_network_name }}"
  register: register_second_network_info

- name: Set second network subnet CIDR fact
  set_fact:
    openshift_masters_second_network: "{{ register_second_network_info.openstack_networks[0].subnet_ipam[0].subnet_cidr }}"

- name: Set os_port_master_second variable
  set_fact:
    os_port_master_second: "{{ openshift_cluster_id }}-master-second-port"

- name: Retrieve information about all master servers
  os_server_info:
    cloud: "{{ openstack_cloud_name }}"
    server: "openshift*master*"
  register: register_master_servers

- name: Get master nodes ip addresses
  os_server_info:
    cloud: "{{ openstack_cloud_name }}"
    server: "openshift*master*"
  register: reg_masters
  
- name: Add master hosts to the masters host group
  add_host:
    hostname: "{{ item.private_v4 }}"
    groupname: masters
  loop: "{{ reg_masters.openstack_servers }}"
  no_log: yes

- name: Create second master port
  os_port:
    cloud: "{{ openstack_cloud_name }}"
    state: present
    name: "{{ item.1 }}-{{ item.0 }}"
    network: "{{ openshift_masters_second_network_name }}"
    fixed_ips:
      - ip_address: "{{ openshift_masters_second_network | next_nth_usable(openshift_masters_nth_usable_addr+item.0) }}"
  with_indexed_items: "{{ [os_port_master_second] * control_plane_servers }}"

- name: Attach second network interface to the master servers
  ignore_errors: True
  shell:
    cmd: "openstack server add port {{ openshift_cluster_id }}-master-{{ item.0 }} {{ item.1 }}-{{ item.0 }}"
  with_indexed_items: "{{ [os_port_master_second] * control_plane_servers }}" 


- name: Remove from SSH's known hosts (possible) new master servers records
  local_action: shell ssh-keygen -R {{ item }}
  with_items: "{{ groups.masters }}"

- name: Wait for master servers SSH to come up
  local_action: shell ssh -o "UserKnownHostsFile /dev/null" -o "StrictHostKeyChecking no" -F ssh.cfg core@{{ item }} echo hello
  retries: 5
  delay: 5
  register: reg_ssh
  until: reg_ssh.stdout.find('hello') != -1
  with_items: "{{ groups.masters }}"

- name: Set the second interface default gw
  set_fact:
    masters_second_if_gw_ip: "{{ openshift_masters_second_network | ansible.netcommon.ipaddr('net') | ansible.netcommon.ipaddr('1') | regex_findall('\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b') }}"

# TODO Verify, that we have two interfaces. In case that we don't have one, skip this task, or fail???
- name: Get the second interface UUID
  local_action: shell ssh -o "UserKnownHostsFile /dev/null" -o "StrictHostKeyChecking no" -F ssh.cfg core@{{ item }} sudo nmcli conn | grep ens | tail -n 1 | awk '{ print $(NF-2)}'
  loop: "{{ groups.masters }}"
  register: reg_nmcli_eth_uuid

# TODO Don't remove default route for primary interface
- name: Remove default route from second interface
  local_action: shell ssh -o "UserKnownHostsFile /dev/null" -o "StrictHostKeyChecking no" -F ssh.cfg core@{{ groups.masters[item] }} sudo nmcli conn mod {{ reg_nmcli_eth_uuid.results[item].stdout }} ipv4.never-default true
  loop: [0, 1, 2]

- name: Shutdown second interface
  local_action: shell ssh -o "UserKnownHostsFile /dev/null" -o "StrictHostKeyChecking no" -F ssh.cfg core@{{ groups.masters[item] }} sudo nmcli conn down {{ reg_nmcli_eth_uuid.results[item].stdout }}
  loop: [0, 1, 2]

- name: Start second interface
  local_action: shell ssh -o "UserKnownHostsFile /dev/null" -o "StrictHostKeyChecking no" -F ssh.cfg core@{{ groups.masters[item] }} sudo nmcli conn up {{ reg_nmcli_eth_uuid.results[item].stdout }}
  loop: [0, 1, 3]
